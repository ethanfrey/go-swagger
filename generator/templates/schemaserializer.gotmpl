{{ define "modelSerializer" }}
// MarshalJSON marshals this object with additional properties into a JSON object
func ({{.ReceiverName}} {{ pascalize .Name }}) MarshalJSON() ([]byte, error) {
	out := jwriter.Writer{}
	{{ .ReceiverName }}.MarshalEasyJSON(&out)
	return out.BuildBytes()
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func ({{.ReceiverName}} *{{ pascalize .Name }}) UnmarshalJSON(data []byte) error {
  in := jlexer.Lexer{Data: data}
	{{ .ReceiverName }}.UnmarshalEasyJSON(&in)
	return in.Error()
}

// MarshalEasyJSON marshals this object with additional properties into a JSON object
func ({{.ReceiverName}} *{{ pascalize .Name }}) MarshalEasyJSON(out *jwriter.Writer) {
  {{ template "schemaSerializer" . }}
}

// UnmarshalEasyJSON unmarshals this object with additional properties from JSON
func ({{.ReceiverName}} *{{ pascalize .Name }}) UnmarshalEasyJSON(in *jlexer.Lexer) {
  {{ template "schemaDeserializer" . }}
}
{{ end }}
{{ define "schemaValueSerializer" }}func(value {{ template "schemaType" . }}, out *jwriter.Writer) error {
  {{ if or .IsComplexObject .IsTuple .IsAdditionalProperties .IsAliased .IsCustomFormatter }}b, err := swag.WriteJSON(value)
  if err != nil {
    return error
  }
  out.Raw(b, nil){{ else if .IsArray }}out.RawByte('[')
    for i, v := range {{ .ValueExpression }} {
      if i > 0 {
        out.RawByte(',')
      }
      {{ .IndexVar }}Fn := {{ template "schemaValueSerializer" .Items }}
      if err := {{ .IndexVar }}Fn(v, out); err != nil {
        return err
      }
    }
    out.RawByte(']')
  {{ else }}{{ .JSONOut }}(value){{ end }}
  return nil
}{{ end }}
{{ define "schemaValueDeserializer" }}func(in *jlexer.Lexer) ({{ template "schemaType" . }}, error) {
{{ if or .IsComplexObject .IsTuple .IsAdditionalProperties .IsAliased .IsCustomFormatter }}var result {{ template "dereffedSchemaType" . }}
if data := in.Raw(); in.Ok() {
  if err := swag.ReadJSON(data, &result); err != nil {
    return {{ if .IsNullable }}nil{{ else }}{{ .Zero }}{{ end }}, err
  }
}
return {{ if .IsNullable }}&{{ end }}result, nil
{{ else if .IsArray }}var result []{{ template "schemaType" .Items }}
{{ .IndexVar }}ReadFn := {{ template "schemaValueDeserializer" .Items }}
in.Delim('[')
if !in.IsDelim(']') {
  result = make([]{{ template "schemaType" .Items }}, 0, 64)
} else {
  result = nil
}
for !in.IsDelim(']') {
  wv, err := {{ .IndexVar }}ReadFn(in)
  if err != nil {
    in.AddError(err)
    return
  }
  result = append(result, wv)
  in.WantComma()
}
in.Delim(']')
{{ else }}return {{ .JSONIn }}, nil{{ end }}
}{{ end }}
{{ define "schemaSerializer" }}
{{ if or .IsComplexObject .IsTuple .IsAdditionalProperties }}{{ template "schemaObjectSerializer" . }}
{{ else if .IsArray }}{{ template "schemaSliceSerializer" . }}
{{ else if .IsCustomFormatter }}{{ else }}{{ .JSONOut }}
{{ end }}{{ end }}
{{ define "schemaDeserializer" }}
{{ if or .IsComplexObject .IsTuple .IsAdditionalProperties }}{{ template "schemaObjectDeserializer" . }}
{{ else if .IsArray }}{{ template "schemaSliceDeserializer" . }}
{{ else if .IsCustomFormatter }}{{ else }}{{ .JSONIn }}
{{ end }}{{ end }}
{{ define "schemaSliceSerializer" }}
out.RawByte('[')
{{ camelize .Name }}ItemsFn := {{ template "schemaValueSerializer" .Items }}
for i, v := range {{ .ValueExpression }} {
  if i > 0 {
    out.RawByte(',')
  }
  if err := {{ camelize .Name }}ItemsFn(v, out); err != nil {
    if out.Error == nil {
      out.Error = err
      return
    }
  }
}
out.RawByte(']')
{{ end }}
{{ define "schemaSliceDeserializer" }}
var result []{{ template "schemaType" .Items }}
{{ .IndexVar }}ReadFn := {{ template "schemaValueDeserializer" .Items }}
in.Delim('[')
if !in.IsDelim(']') {
  result = make([]{{ template "schemaType" .Items }}, 0, 64)
} else {
  result = nil
}
for !in.IsDelim(']') {
  wv, err := {{ .IndexVar }}ReadFn(in)
  if err != nil {
    in.AddError(err)
    return
  }
  result = append(result, wv)
  in.WantComma()
}
in.Delim(']')
{{ end }}
{{ define "schemaObjectDeserializer" }}
{{ .ReceiverName }}.__nulls = *bitset.New({{ noProperties . }})
{{ .ReceiverName }}.__setValues = *bitset.New({{ noProperties . }})
if in.IsNull() {
  in.Skip()
  return
}
in.Delim('{')
for !in.IsDelim('}') {
  key := in.UnsafeString()
  in.WantColon()
  {{ $propLen := (noProperties .) }}
  if in.IsNull() {
    switch key {
    {{ range $index, $prop := .Properties }}
    case {{ printf "%q" $prop.Name }}:
      {{ $prop.ValueExpression }} = {{ if or $prop.IsNullable $prop.IsArray }}nil{{ else }}{{ $prop.Zero }}{{ end }}
      {{ $.ReceiverName }}.__setValues.Set({{ $index }})
      {{ $.ReceiverName }}.__nulls.Set({{ $index }})
    {{ end }}{{ if .AdditionalProperties }}
      {{ .AdditionalProperties.ValueExpression }} = {{ if or .AdditionalProperties.IsNullable .AdditionalProperties.IsArray }}nil{{ else }}{{ .AdditionalProperties.Zero }}{{ end }}
      {{ $.ReceiverName }}.__setValues.Set({{ $propLen }}{{ if .AdditionalItems }} - 1{{ end }})
      {{ $.ReceiverName }}.__nulls.Set({{ $propLen }}{{ if .AdditionalItems }} - 1{{ end }})
    {{ end }}{{ if .AdditionalItems }}
      {{ .AdditionalItems.ValueExpression }} = {{ if or .AdditionalItems.IsNullable .AdditionalItems.IsArray }}nil{{ else }}{{ .AdditionalItems.Zero }}{{ end }}
      {{ $.ReceiverName }}.__setValues.Set({{ $propLen }})
      {{ $.ReceiverName }}.__nulls.Set({{ $propLen }})
    {{ end }}
    default:
      in.SkipRecursive()
    }
    in.Skip()
    in.WantComma()
    continue
  }
  switch key {
  {{ range $index, $prop := .Properties }}
  case {{ printf "%q" $prop.Name }}:
    {{ camelize $prop.Name }}ValueFn := {{ template "schemaValueDeserializer" $prop }}

		if {{ camelize $prop.Name }}Value, err := {{ camelize $prop.Name }}ValueFn(in); err != nil {
      in.AddError(err)
    } else {
      {{ $prop.ValueExpression }} = {{ camelize $prop.Name }}Value
      {{ $.ReceiverName }}.__setValues.Set({{ $index }})
      {{ $.ReceiverName }}.__nulls.Clear({{ $index }})
    }
  {{ end }}{{ if .AdditionalProperties }}
    {{ camelize .AdditionalProperties.Name }}ValueFn := {{ template "schemaValueDeserializer" .AdditionalProperties }}

		if {{ camelize .AdditionalProperties.Name }}Value, err := {{ camelize .AdditionalProperties.Name }}ValueFn(in); err != nil {
      in.AddError(err)
    } else {
      {{ $.ReceiverName }}.{{ pascalize .AdditionalProperties.Name }} = {{ camelize .AdditionalProperties.Name }}Value
      {{ $.ReceiverName }}.__setValues.Set({{ $propLen }}{{ if .AdditionalItems }} - 1{{ end }})
      {{ $.ReceiverName }}.__nulls.Clear({{ $propLen }}{{ if .AdditionalItems }} - 1{{ end }})
    }
  {{ end }}{{ if .AdditionalItems }}
    {{ camelize .AdditionalItems.Name }}ValueFn := {{ template "schemaValueDeserializer" .AdditionalItems }}

		if {{ camelize .AdditionalItems.Name }}Value, err := {{ camelize .AdditionalItems.Name }}ValueFn(in); err != nil {
      in.AddError(err)
    } else {
      {{ $.ReceiverName }}.{{ pascalize .AdditionalItems.Name }} = {{ camelize .AdditionalItems.Name }}Value
      {{ $.ReceiverName }}.__setValues.Set({{ $propLen }})
      {{ $.ReceiverName }}.__nulls.Clear({{ $propLen }})
    }
  {{ end }}
  default:
    in.SkipRecursive()
  }
  in.WantComma()
}
in.Delim('}')
{{ end }}
{{ define "schemaObjectSerializer" }}
out.RawByte('{')
first := true
_ = first
{{ range $index, $prop := .AllOf }}
if !swag.IsZero({{ $prop.ValueExpression }}) || {{ $.ReceiverName }}.__setValues.Test({{ $index }}) {
  if !first {
    out.RawByte(',')
  }
  first = false
  {{ if $prop.IsNullable }}if {{ $.ReceiverName }}.__nulls.Test({{ $index }}) {
    out.RawString("null")
  } else {
    {{ end }}{{ camelize $prop.Name }}WriteFn := {{ template "schemaValueSerializer" $prop }}
    if err := {{ camelize $prop.Name }}WriteFn({{ $prop.ValueExpression }}, out); err != nil {
      if out.Error == nil {
        out.Error = err
        return
      }
    }{{ if $prop.IsNullable }}
  }{{ end }}
}
{{ end }}{{ $aoLen := (len .AllOf) }}{{ range $index, $prop := .Properties }}
if !swag.IsZero({{ $prop.ValueExpression }}) || {{ $.ReceiverName }}.__setValues.Test({{ $index }}{{ if gt $aoLen 0 }} + {{ $aoLen }}{{ end}}) {
  if !first {
    out.RawByte(',')
  }
  first = false
  out.RawString("\"{{ $prop.Name }}\":")
  {{ if $prop.IsNullable }}if {{ $.ReceiverName }}.__nulls.Test({{ $index }}{{ if gt $aoLen 0 }} + {{ $aoLen }}{{ end}}) {
    out.RawString("null")
  } else {
    {{ end }}{{ camelize $prop.Name }}WriteFn := {{ template "schemaValueSerializer" $prop }}
    if err := {{ camelize $prop.Name }}WriteFn({{ $prop.ValueExpression }}, out); err != nil {
      if out.Error == nil {
        out.Error = err
        return
      }
    }{{ if $prop.IsNullable }}
  }{{ end }}
}
{{ end }}
out.RawByte('}')
{{ end }}
{{ define "schemaSerializer2" }}{{ if .IsSubType }}
{{ if not .HasBaseType }}{{ template "discriminatedSerializer" . }}{{ end}}
{{ else if .IsTuple }}
{{ template "tupleSerializer" . }}
{{ else if .IsAdditionalProperties }}
{{ template "additionalPropertiesSerializer" . }}
{{ else if .HasBaseType }}
{{ template "hasDiscriminatedSerializer" . }}
{{ end }}{{ end }}
