{{ define "modelSerializer" }}
// MarshalJSON marshals this object with additional properties into a JSON object
func ({{.ReceiverName}} {{ pascalize .Name }}) MarshalJSON() ([]byte, error) {
	out := jwriter.Writer{}
	{{ .ReceiverName }}.MarshalEasyJSON(&out)
	return out.BuildBytes()
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func ({{.ReceiverName}} *{{ pascalize .Name }}) UnmarshalJSON(data []byte) error {
  in := jlexer.Lexer{Data: data}
	{{ .ReceiverName }}.UnmarshalEasyJSON(&in)
	return in.Error()
}

// MarshalEasyJSON marshals this object with additional properties into a JSON object
func ({{.ReceiverName}} *{{ pascalize .Name }}) MarshalEasyJSON(out *jwriter.Writer) {
  {{ template "schemaSerializer" . }}
}

// UnmarshalEasyJSON unmarshals this object with additional properties from JSON
func ({{.ReceiverName}} *{{ pascalize .Name }}) UnmarshalEasyJSON(in *jlexer.Lexer) {
  {{ template "schemaDeserializer" . }}
}
{{ end }}
{{ define "schemaSerializer" }}
{{ if or .IsComplexObject .IsTuple .IsAdditionalProperties }}{{ template "schemaObjectSerializer" . }}
{{ else if .IsArray }}{{ template "schemaSliceSerializer" . }}
{{ else if .IsCustomFormatter }}{{ template "schemaStrfmtSerializer" . }}
{{ else }}{{ .JSONIn }}
{{ end }}{{ end }}
{{ define "schemaDeserializer" }}
{{ if or .IsComplexObject .IsTuple .IsAdditionalProperties }}{{ template "schemaObjectDeserializer" . }}
{{ else if .IsArray }}{{ template "schemaSliceDeserializer" . }}
{{ else if .IsCustomFormatter }}{{ template "schemaStrfmtDeserializer" . }}
{{ else }}{{ .JSONOut }}
{{ end }}{{ end }}
{{ define "schemaStrfmtSerializer" }}
{{ end }}
{{ define "schemaStrfmtDeserializer" }}
{{ end }}
{{ define "schemaSliceSerializer" }}
{{ end }}
{{ define "schemaSliceDeserializer" }}
{{ end }}
{{ define "objectValueDeserializer" }}
{{ end }}
{{ define "schemaObjectDeserializer" }}
{{ .ReceiverName }}.__nulls = *bitset.New({{ noProperties . }})
{{ .ReceiverName }}.__setValues = *bitset.New({{ noProperties . }})
if in.IsNull() {
  in.Skip()
  return
}
in.Delim('{')
for !in.IsDelim('}') {
  key := in.UnsafeString()
  in.WantColon()
  if in.IsNull() {
    switch key {
    {{ $propLen := (noProperties .) }}{{ range $index, $prop := .Properties }}
    case {{ printf "%q" $prop.Name }}:
      {{ $.ReceiverName }}.{{ pascalize $prop.Name }} = {{ $prop.Zero }}
      {{ $.ReceiverName }}.__setValues.Set({{ $index }})
      {{ $.ReceiverName }}.__nulls.Set({{ $index }})
    {{ end }}{{ if .AdditionalProperties }}
      {{ $.ReceiverName }}.{{ pascalize .AdditionalProperties.Name }} = {{ .AdditionalProperties.JSONIn }}()
      {{ $.ReceiverName }}.__setValues.Set({{ $propLen }}{{ if .AdditionalItems }} - 1{{ end }})
      {{ $.ReceiverName }}.__nulls.Set({{ $propLen }}{{ if .AdditionalItems }} - 1{{ end }})
    {{ end }}{{ if .AdditionalItems }}
      {{ $.ReceiverName }}.{{ pascalize .AdditionalItems.Name }} = {{ .AdditionalItems.JSONIn }}()
      {{ $.ReceiverName }}.__setValues.Set({{ $propLen }})
      {{ $.ReceiverName }}.__nulls.Set({{ $propLen }})
    {{ end }}
    default:
      in.SkipRecursive()
    }
    in.Skip()
    in.WantComma()
    continue
  }
  switch key {
  {{ range $index, $prop := .Properties }}
  case {{ printf "%q" $prop.Name }}:
    {{ $.ReceiverName }}.{{ pascalize $prop.Name }} = {{ $prop.JSONIn }}
    {{ $.ReceiverName }}.__setValues.Set({{ $index }})
    {{ $.ReceiverName }}.__nulls.Clear({{ $index }})
  {{ end }}{{ if .AdditionalProperties }}
    {{ $.ReceiverName }}.{{ pascalize .AdditionalProperties.Name }} = {{ .AdditionalProperties.JSONIn }}
    {{ $.ReceiverName }}.__setValues.Set({{ $propLen }}{{ if .AdditionalItems }} - 1{{ end }})
    {{ $.ReceiverName }}.__nulls.Clear({{ $propLen }}{{ if .AdditionalItems }} - 1{{ end }})
  {{ end }}{{ if .AdditionalItems }}
    {{ $.ReceiverName }}.{{ pascalize .AdditionalItems.Name }} = {{ .AdditionalItems.JSONIn }}
    {{ $.ReceiverName }}.__setValues.Set({{ $propLen }})
    {{ $.ReceiverName }}.__nulls.Clear({{ $propLen }})
  {{ end }}
  default:
    in.SkipRecursive()
  }
  in.WantComma()
}
in.Delim('}')
{{ end }}
{{ define "schemaObjectSerializer" }}
out.RawByte('{')
first := true
_ = first
{{ range $index, $prop := .AllOf }}
if !swag.IsZero({{ $prop.ValueExpression }}) || {{ $.ReceiverName }}.__setValues.Test({{ $index }}) {
  if !first {
    out.RawByte(',')
  }
  first = false
  {{ if $prop.IsNullable }}if {{ $.ReceiverName }}.__nulls.Test({{ $index }}) {
    out.RawString("null")
  } else {
    {{ end }}{{ $prop.JSONOut }}({{ $prop.ValueExpression }}){{ if $prop.IsNullable }}
  }{{ end }}
}
{{ end }}{{ $aoLen := (len .AllOf) }}{{ range $index, $prop := .Properties }}
if !swag.IsZero({{ $prop.ValueExpression }}) || {{ $.ReceiverName }}.__setValues.Test({{ $index }}{{ if gt $aoLen 0 }} + {{ $aoLen }}{{ end}}) {
  if !first {
    out.RawByte(',')
  }
  first = false
  out.RawString("\"{{ $prop.Name }}\":")
  {{ if $prop.IsNullable }}if {{ $.ReceiverName }}.__nulls.Test({{ $index }}{{ if gt $aoLen 0 }} + {{ $aoLen }}{{ end}}) {
    out.RawString("null")
  } else {
    {{ end }}{{ $prop.JSONOut }}({{ $prop.ValueExpression }}){{ if $prop.IsNullable }}
  }{{ end }}
}
{{ end }}
out.RawByte('}')
{{ end }}
{{ define "schemaSerializer2" }}{{ if .IsSubType }}
{{ if not .HasBaseType }}{{ template "discriminatedSerializer" . }}{{ end}}
{{ else if .IsTuple }}
{{ template "tupleSerializer" . }}
{{ else if .IsAdditionalProperties }}
{{ template "additionalPropertiesSerializer" . }}
{{ else if .HasBaseType }}
{{ template "hasDiscriminatedSerializer" . }}
{{ end }}{{ end }}
